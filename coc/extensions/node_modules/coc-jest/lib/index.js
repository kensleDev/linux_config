(function(e, a) { for(var i in a) e[i] = a[i]; }(exports, /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const coc_nvim_1 = __webpack_require__(1);
const jest_1 = __webpack_require__(2);
const jestConfig_1 = __webpack_require__(7);
const configs_1 = __webpack_require__(8);
const findTest_1 = __webpack_require__(9);
const { nvim } = coc_nvim_1.workspace;
function activate(context) {
    return __awaiter(this, void 0, void 0, function* () {
        const { subscriptions } = context;
        subscriptions.push(coc_nvim_1.commands.registerCommand("jest.init", initJest));
        subscriptions.push(coc_nvim_1.commands.registerCommand("jest.projectTest", runProject));
        subscriptions.push(coc_nvim_1.commands.registerCommand("jest.fileTest", runFile, null, true));
        subscriptions.push(coc_nvim_1.commands.registerCommand("jest.singleTest", runSingleTest));
    });
}
exports.activate = activate;
function initJest() {
    return __awaiter(this, void 0, void 0, function* () {
        let { root } = coc_nvim_1.workspace;
        coc_nvim_1.workspace.runTerminalCommand("jest --init", root);
    });
}
function runProject() {
    return __awaiter(this, void 0, void 0, function* () {
        const cmd = yield configs_1.isWatchAllCmd();
        yield runJestCommand(cmd);
    });
}
function runFile() {
    return __awaiter(this, void 0, void 0, function* () {
        const watchCmd = yield configs_1.isWatchCmd();
        const currentFilePath = yield coc_nvim_1.workspace.nvim.eval('expand("%:p")');
        const cmd = `--runTestsByPath ${currentFilePath} ${watchCmd}`;
        yield runJestCommand(cmd);
    });
}
function runSingleTest() {
    return __awaiter(this, void 0, void 0, function* () {
        const watchCmd = yield configs_1.isWatchCmd();
        let testName = yield findTest_1.findNearestTest();
        testName = testName.replace(/'/g, "\\'");
        const currentFilePath = yield coc_nvim_1.workspace.nvim.eval('expand("%:p")');
        return runJestCommand(`--runTestsByPath ${currentFilePath} -t='${testName}' ${watchCmd}`);
    });
}
function runJestCommand(cmd = "") {
    return __awaiter(this, void 0, void 0, function* () {
        const jestBinCmd = yield jest_1.makeJestBinCmd();
        const jestConfigCmd = yield jestConfig_1.makeJestConfigCmd();
        yield openTerminal(`${jestBinCmd} ${jestConfigCmd} ${cmd}`);
    });
}
let terminalBufnr;
function openTerminal(cmd) {
    return __awaiter(this, void 0, void 0, function* () {
        const flags = yield configs_1.getJestFlagsFromConfig();
        const position = yield configs_1.getTerminalPosition();
        if (terminalBufnr) {
            nvim.command(`silent! bd! ${terminalBufnr}`, true);
            terminalBufnr = undefined;
        }
        terminalBufnr = (yield nvim.call("coc#util#open_terminal", {
            autoclose: 0,
            keepfocus: 1,
            position,
            cwd: coc_nvim_1.workspace.cwd,
            cmd: `${cmd} ${flags}`,
        }));
    });
}


/***/ }),
/* 1 */
/***/ (function(module, exports) {

module.exports = require("coc.nvim");

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const coc_nvim_1 = __webpack_require__(1);
const common_1 = __webpack_require__(3);
const path_1 = __importDefault(__webpack_require__(5));
exports.makeJestBinCmd = () => __awaiter(void 0, void 0, void 0, function* () {
    const jestBinPath = yield findJestBinPath();
    if (jestBinPath === "") {
        return "jest";
    }
    return `node ${jestBinPath}`;
});
const findJestBinPath = () => __awaiter(void 0, void 0, void 0, function* () {
    const { root } = coc_nvim_1.workspace;
    for (let name of ["jest", "jest.cmd"]) {
        const jestPath = path_1.default.join(root, `node_modules/.bin/${name}`);
        const exists = yield common_1.isFileExist(jestPath);
        if (exists) {
            return path_1.default.join(root, `./node_modules/.bin/${name}`);
        }
    }
    return "";
});


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(__webpack_require__(4));
const path_1 = __importDefault(__webpack_require__(5));
const util_1 = __importDefault(__webpack_require__(6));
exports.findUp = (filename, cwd) => __awaiter(void 0, void 0, void 0, function* () {
    if (cwd === "/") {
        return "";
    }
    const packagePath = path_1.default.join(cwd, filename);
    const exists = yield exports.isFileExist(packagePath);
    if (exists) {
        return cwd;
    }
    return exports.findUp(filename, path_1.default.dirname(cwd));
});
exports.isFileExist = (filepath) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const stat = yield util_1.default.promisify(fs_1.default.stat)(filepath);
        return stat.isFile();
    }
    catch (e) {
        return false;
    }
});


/***/ }),
/* 4 */
/***/ (function(module, exports) {

module.exports = require("fs");

/***/ }),
/* 5 */
/***/ (function(module, exports) {

module.exports = require("path");

/***/ }),
/* 6 */
/***/ (function(module, exports) {

module.exports = require("util");

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const coc_nvim_1 = __webpack_require__(1);
const configs_1 = __webpack_require__(8);
const common_1 = __webpack_require__(3);
exports.makeJestConfigCmd = () => __awaiter(void 0, void 0, void 0, function* () {
    const jestConfigPath = yield findJestConfigPath();
    if (jestConfigPath === "") {
        return "";
    }
    return `--config ${jestConfigPath}`;
});
const findJestConfigPath = () => __awaiter(void 0, void 0, void 0, function* () {
    const { root } = coc_nvim_1.workspace;
    const config = yield configs_1.getConfiguration();
    const configFileName = config.get("configFileName");
    const configPath = yield common_1.findUp(configFileName, root);
    if (configPath === "") {
        return "";
    }
    return `${configPath}/${configFileName}`;
});


/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const coc_nvim_1 = __webpack_require__(1);
let optionsNames = [
    "detectLeaks",
    "watchman",
    "detectOpenHandles",
    "forceExit",
    "noStackTrace",
];
exports.getJestFlagsFromConfig = () => __awaiter(void 0, void 0, void 0, function* () {
    let args = [];
    const config = yield exports.getConfiguration();
    for (let name of optionsNames) {
        if (config.get(name)) {
            args.push(`--${name}`);
        }
    }
    if (config.get("customFlags")) {
        for (let flag of config.get("customFlags")) {
            args.push(`--${flag}`);
        }
    }
    return args.join(" ");
});
exports.getTerminalPosition = () => __awaiter(void 0, void 0, void 0, function* () {
    const config = yield exports.getConfiguration();
    const terminalPosition = config.get('terminalPosition');
    if (terminalPosition === undefined) {
        return 'right';
    }
    return terminalPosition;
});
exports.isWatchAllCmd = () => __awaiter(void 0, void 0, void 0, function* () {
    const watch = yield isWatch();
    if (watch) {
        return ' --watchAll';
    }
    return '';
});
exports.isWatchCmd = () => __awaiter(void 0, void 0, void 0, function* () {
    const watch = yield isWatch();
    if (watch) {
        return ' --watch';
    }
    return '';
});
const isWatch = () => __awaiter(void 0, void 0, void 0, function* () {
    const config = yield exports.getConfiguration();
    return config.get('watch');
});
exports.getConfiguration = () => __awaiter(void 0, void 0, void 0, function* () {
    let document = yield coc_nvim_1.workspace.document;
    return coc_nvim_1.workspace.getConfiguration('jest', document ? document.uri : undefined);
});


/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const coc_nvim_1 = __webpack_require__(1);
exports.findNearestTest = () => __awaiter(void 0, void 0, void 0, function* () {
    const doc = yield coc_nvim_1.workspace.document;
    const { nvim } = coc_nvim_1.workspace;
    const lineNumber = (yield nvim.call('line', '.')) - 1;
    return findTestName(doc, lineNumber);
});
const findTestName = (doc, lineNumber) => {
    const line = doc.getline(lineNumber);
    const matchedArray = line.match(/^\s*(?:it|test|describe)\((["'])(.+)\1/);
    if (matchedArray != undefined) {
        return matchedArray[2];
    }
    return findTestName(doc, lineNumber - 1);
};


/***/ })
/******/ ])));